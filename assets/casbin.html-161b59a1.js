import{_ as p,M as e,p as o,q as c,R as n,t as s,N as i,a1 as a}from"./framework-96b046e1.js";const l={},u=a(`<h1 id="casbin" tabindex="-1"><a class="header-anchor" href="#casbin" aria-hidden="true">#</a> Casbin</h1><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context" aria-hidden="true">#</a> Context</h2><ul><li>In a system, you have to build an authorization policy based on users, roles and resources. Most of time, you created your own model and check permissions depends on resources/features or even rest api endpoints.</li><li>There is a quick and reliable solution named &quot;casbin&quot;. It is tool that support a lot of programming languages. Also, it is easy to understand and apply to your project.</li><li>2 pillars of casbin: <strong>model</strong>(rules for validate user&#39;s permissions) and <strong>policy</strong>(user&#39;s permissions on resources, user&#39;s roles,... - data)</li></ul><p>It sounds cool right, but why do we need casbin? Let&#39;s dive in real world examples to perceive its benefits</p><h2 id="real-world-examples" tabindex="-1"><a class="header-anchor" href="#real-world-examples" aria-hidden="true">#</a> Real world examples</h2><h3 id="authorization-with-users-roles-and-permissions" tabindex="-1"><a class="header-anchor" href="#authorization-with-users-roles-and-permissions" aria-hidden="true">#</a> Authorization with users, roles and permissions</h3><p><img src="https://user-images.githubusercontent.com/31009750/219676885-1fad3ad1-3cf8-41f0-83dd-069105b911c0.png" alt="image"></p><p>With this model, if using traditional ways, when a user logged in, we can create a JWT token which includes their userId.</p><p>Each request that required authentication, their token will be extracted to retrieve these informations: roleId, permissions(which come from role) and attach them into the current request</p><p>Then in the authorization process, the request that has the authorization information will be checked with the current request object, in this case it it the specific endpoint. We must define the required permissions for each endpoints for group of end endpoints.</p><p>If the request has the required permissions to access the resource, than, we can return the approriate resource.</p><p>Several cases, you may have to face with:</p><ul><li>Case 1: Some endpoints require the composition of several permissions</li><li>Case 2: Some endpoints require at least of one of the specific permissions</li><li>Case 3: Some endpoints require only one permission (an edge of case 2)</li><li>Case 4: Some endpoints require permission or owner&#39;s permission(Eg: an article can be edit by the author or admin user)</li><li>Case 5: Some endpoints applied restrictions/exceptions for specific role</li></ul><p>And many ...</p><p>Therefore in every cases, we have to write the logic code to adapt the business rules.</p><p>In this situation, <strong>casbin</strong> has the built-in logic code inside to solve our business rules. We only need to define the model(business rule - followed casbin format), policy(the data includes: authorization informations of request, the permissions). <strong>casbin</strong> provide us the library to load the model and policy, and we can use it to check the request is allowed or denied. It supports almost popular programming languages. So that you can bring your model to anywhere that matched without dependency on a specific language.</p><p>Let&#39;s dive in more details</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> roles <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">roleId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">roleName</span><span class="token operator">:</span> <span class="token string">&quot;sysadmin&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">roleId</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">roleName</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">roleId</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">roleName</span><span class="token operator">:</span> <span class="token string">&quot;manager&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">roleId</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">roleName</span><span class="token operator">:</span> <span class="token string">&quot;staff&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;Super Admin&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">roleIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;System Admin&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">roleIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;Manager 1&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">roleIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;Manager 2&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">roleIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;Staff 1&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">roleIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">userId</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&quot;Staff 2&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">roleIds</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-request-definition-parameters-of-the-request-that-we-will-use-it-to-check-with-policy" tabindex="-1"><a class="header-anchor" href="#_1-request-definition-parameters-of-the-request-that-we-will-use-it-to-check-with-policy" aria-hidden="true">#</a> 1.Request definition : parameters of the request that we will use it to check with policy</h3><ul><li>Request: PermissionKey, RoleId</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>request_definition<span class="token punctuation">]</span>
r <span class="token operator">=</span> permissionKey<span class="token punctuation">,</span> roleId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-policy-definition-policy-in-this-case-is-permission-which-is-combination-of-users-roles-actions-resources" tabindex="-1"><a class="header-anchor" href="#_2-policy-definition-policy-in-this-case-is-permission-which-is-combination-of-users-roles-actions-resources" aria-hidden="true">#</a> 2.Policy definition : policy in this case is permission(which is combination of users,roles,actions,resources)</h3><p>Based on what we have, our policy should be:</p><ul><li>Permission: Key, RoleId</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>p<span class="token punctuation">,</span> USERS_RETRIEVE<span class="token punctuation">,</span> <span class="token number">1</span>
p<span class="token punctuation">,</span> USERS_CREATE<span class="token punctuation">,</span> <span class="token number">1</span>
p<span class="token punctuation">,</span> USERS_UPDATE<span class="token punctuation">,</span> <span class="token number">1</span>
p<span class="token punctuation">,</span> USERS_DELETE<span class="token punctuation">,</span> <span class="token number">1</span>
p<span class="token punctuation">,</span> USERS_RETRIEVE<span class="token punctuation">,</span> <span class="token number">2</span>
p<span class="token punctuation">,</span> STAFF_RETRIEVE<span class="token punctuation">,</span> <span class="token number">3</span>
p<span class="token punctuation">,</span> PROJECTS_RETRIEVE<span class="token punctuation">,</span> <span class="token number">3</span>
p<span class="token punctuation">,</span> PROJECTS_RETRIEVE<span class="token punctuation">,</span> <span class="token number">4</span>
p<span class="token punctuation">,</span> PROJECTS_UPDATE<span class="token punctuation">,</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>policy_definition<span class="token punctuation">]</span>
p <span class="token operator">=</span> permissionKey<span class="token punctuation">,</span> roleId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-policy-effect-to-define-whether-the-request-should-be-accepted-if-multiple-policy-rules-matchs-the-request" tabindex="-1"><a class="header-anchor" href="#_3-policy-effect-to-define-whether-the-request-should-be-accepted-if-multiple-policy-rules-matchs-the-request" aria-hidden="true">#</a> 3.Policy effect : to define whether the request should be accepted if multiple policy rules matchs the request</h3><ul><li>Policy effect: at least one rule is matched</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>policy_effect<span class="token punctuation">]</span>
e <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token function">where</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>eft <span class="token operator">==</span> allow<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-matchers-to-define-how-policy-rules-are-evaluated-against-the-request" tabindex="-1"><a class="header-anchor" href="#_4-matchers-to-define-how-policy-rules-are-evaluated-against-the-request" aria-hidden="true">#</a> 4.Matchers : to define how policy rules are evaluated against the request</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>matchers<span class="token punctuation">]</span>
m <span class="token operator">=</span> r<span class="token punctuation">.</span>permissionKey <span class="token operator">==</span> p<span class="token punctuation">.</span>permissionKey <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>roleId <span class="token operator">==</span> p<span class="token punctuation">.</span>roleId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sample" tabindex="-1"><a class="header-anchor" href="#sample" aria-hidden="true">#</a> Sample</h3>`,32),r={href:"https://github.com/misostack/typescript-examples",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// import http from &#39;http&#39;;</span>

<span class="token comment">// const hostname = &#39;127.0.0.1&#39;;</span>
<span class="token comment">// const port = 3000;</span>

<span class="token comment">// const server = http.createServer((req, res) =&gt; {</span>
<span class="token comment">//   res.statusCode = 200;</span>
<span class="token comment">//   res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);</span>
<span class="token comment">//   res.end(&#39;Hello World 123&#39;);</span>
<span class="token comment">// });</span>

<span class="token comment">// server.listen(port, hostname, () =&gt; {</span>
<span class="token comment">//   // eslint-disable-next-line no-console</span>
<span class="token comment">//   console.log(\`Server running at http://\${hostname}:\${port}/\`);</span>
<span class="token comment">// });</span>

<span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> newEnforcer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;casbin&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AuthorizationModel<span class="token punctuation">,</span> CustomAdapter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./casbin/custom-adapter&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">??</span> <span class="token number">1337</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">[</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
    roleId<span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">[</span><span class="token string">&quot;roleId&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/members&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// custom Adapter</span>
  <span class="token keyword">const</span> enforcer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">newEnforcer</span><span class="token punctuation">(</span>
    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;casbin/basic_model.conf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// path.join(__dirname, &#39;casbin/basic_policy.csv&#39;),</span>
    <span class="token keyword">new</span> <span class="token class-name">CustomAdapter</span><span class="token punctuation">(</span>AuthorizationModel<span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> user<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> userId <span class="token operator">=</span> user<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
  <span class="token keyword">const</span> resource <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> enforcer<span class="token punctuation">.</span><span class="token function">enforce</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;User Data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Unauthorized&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// custom Adapter</span>
  <span class="token keyword">const</span> enforcer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">newEnforcer</span><span class="token punctuation">(</span>
    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;casbin/rbac_model.conf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// path.join(__dirname, &#39;casbin/rbac_policy.csv&#39;),</span>
    <span class="token keyword">new</span> <span class="token class-name">CustomAdapter</span><span class="token punctuation">(</span>AuthorizationModel<span class="token punctuation">.</span><span class="token constant">RBAC</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> user<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> roleId<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> roleId <span class="token operator">=</span> user<span class="token punctuation">.</span>roleId<span class="token punctuation">;</span>
  <span class="token keyword">const</span> permissionKey <span class="token operator">=</span> <span class="token string">&quot;USERS_RETRIEVE&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> enforcer<span class="token punctuation">.</span><span class="token function">enforce</span><span class="token punctuation">(</span>permissionKey<span class="token punctuation">,</span> roleId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;User Data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Unauthorized&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  p, USERS_RETRIEVE, 1
  p, USERS_CREATE, 1
  p, USERS_UPDATE, 1
  p, USERS_DELETE, 1
  p, USERS_RETRIEVE, 2
  p, STAFF_RETRIEVE, 3
  p, PROJECTS_RETRIEVE, 3
  p, PROJECTS_RETRIEVE, 4
  p, PROJECTS_UPDATE, 3
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    data
      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> l<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> l<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">App listening on http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// casbin/custom-adapter</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Model<span class="token punctuation">,</span> Adapter<span class="token punctuation">,</span> Helper <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;casbin&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// Define a custom adapter that can load the model and policy from your database.</span>
<span class="token keyword">export</span> <span class="token keyword">enum</span> AuthorizationModel <span class="token punctuation">{</span>
  <span class="token constant">BASIC</span><span class="token punctuation">,</span>
  <span class="token constant">RBAC</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> authorizationModel<span class="token operator">:</span> AuthorizationModel<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>authorizationModel<span class="token operator">:</span> AuthorizationModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Initialize a connection to your database.</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>authorizationModel <span class="token operator">=</span> authorizationModel<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">loadPolicy</span><span class="token punctuation">(</span>model<span class="token operator">:</span> Model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authorizationModel <span class="token operator">===</span> AuthorizationModel<span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;read&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      Helper<span class="token punctuation">.</span><span class="token function">loadPolicyLine</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
      Helper<span class="token punctuation">.</span><span class="token function">loadPolicyLine</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
      p, USERS_RETRIEVE, 1
      p, USERS_CREATE, 1
      p, USERS_UPDATE, 1
      p, USERS_DELETE, 1
      p, USERS_RETRIEVE, 2
      p, STAFF_RETRIEVE, 3
      p, PROJECTS_RETRIEVE, 3
      p, PROJECTS_RETRIEVE, 4
      p, PROJECTS_UPDATE, 3
      </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      data
        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> l<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> l<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          Helper<span class="token punctuation">.</span><span class="token function">loadPolicyLine</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">savePolicy</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Save the policies to your database.</span>
    <span class="token comment">// const policies = model.getPolicy();</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">addPolicy</span><span class="token punctuation">(</span>sec<span class="token punctuation">,</span> ptype<span class="token punctuation">,</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Add a policy to your database.</span>
    <span class="token comment">// await this.connection.query(</span>
    <span class="token comment">//   &#39;INSERT INTO policies VALUES (?, ?, ...)&#39;,</span>
    <span class="token comment">//   rule,</span>
    <span class="token comment">// );</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">removePolicy</span><span class="token punctuation">(</span>sec<span class="token punctuation">,</span> ptype<span class="token punctuation">,</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Remove a policy from your database.</span>
    <span class="token comment">// await this.connection.query(&#39;DELETE FROM policies WHERE ...&#39;);</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">removeFilteredPolicy</span><span class="token punctuation">(</span>sec<span class="token punctuation">,</span> ptype<span class="token punctuation">,</span> fieldIndex<span class="token punctuation">,</span> <span class="token operator">...</span>fieldValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Remove policies from your database that match the specified criteria.</span>
    <span class="token comment">// await this.connection.query(&#39;DELETE FROM policies WHERE ...&#39;);</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("Sample Code, you can visit "),n("a",r,[s("here"),i(t)]),s(" for full example")])]),k])}const h=p(l,[["render",d],["__file","casbin.html.vue"]]);export{h as default};
